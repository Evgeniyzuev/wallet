// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  telegramId    Int      @unique
  referrerId    Int?
  username      String?
  firstName     String?
  lastName      String?
  reinvestSetup Int      @default(100)
  aicoreBalance Float    @default(0)
  walletBalance Float    @default(0)
  level         Int      @default(0)
  createdAt     DateTime @default(now())
  lastLoginDate DateTime @default(now())
  contacts      Contact[] @relation("UserContacts")
  referrals     Contact[] @relation("UserReferrals")
  completedTasks CompletedTask[]
}

model Contact {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    Int   
  contactId Int   
  isReferral Boolean @default(false)
  createdAt DateTime @default(now())
  user      User     @relation("UserContacts", fields: [userId], references: [telegramId])
  contact   User     @relation("UserReferrals", fields: [contactId], references: [telegramId])

  @@unique([userId, contactId])
}

model CompletedTask {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  telegramId Int
  taskId    Int
  user      User     @relation(fields: [telegramId], references: [telegramId])

  @@unique([telegramId, taskId])
}
